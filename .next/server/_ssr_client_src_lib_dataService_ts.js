/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_client_src_lib_dataService_ts";
exports.ids = ["_ssr_client_src_lib_dataService_ts"];
exports.modules = {

/***/ "(ssr)/./client/src/lib/dataService.ts":
/*!***************************************!*\
  !*** ./client/src/lib/dataService.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataService: () => (/* binding */ DataService)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(ssr)/./node_modules/firebase/firestore/dist/index.mjs\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(ssr)/./client/src/lib/firebase.ts\");\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./supabase */ \"(ssr)/./client/src/lib/supabase.ts\");\n/* harmony import */ var _databasePriority__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./databasePriority */ \"(ssr)/./client/src/lib/databasePriority.ts\");\n\n\n\n\nclass DataService {\n    static async getProducts() {\n        const activeDb = _databasePriority__WEBPACK_IMPORTED_MODULE_3__.DatabasePriority.getActiveDatabase();\n        switch(activeDb){\n            case 'supabase':\n                return await this.getProductsFromSupabase();\n            case 'firebase':\n                return await this.getProductsFromFirebase();\n            case 'neon':\n                return await this.getProductsFromNeon();\n            default:\n                throw new Error(`Invalid database type: ${activeDb}. Only real databases are supported.`);\n        }\n    }\n    static async getTransactions() {\n        const activeDb = _databasePriority__WEBPACK_IMPORTED_MODULE_3__.DatabasePriority.getActiveDatabase();\n        switch(activeDb){\n            case 'supabase':\n                return await this.getTransactionsFromSupabase();\n            case 'firebase':\n                return await this.getTransactionsFromFirebase();\n            case 'neon':\n                return await this.getTransactionsFromNeon();\n            default:\n                throw new Error(`Invalid database type: ${activeDb}. Only real databases are supported.`);\n        }\n    }\n    static async addProduct(product) {\n        const activeDb = _databasePriority__WEBPACK_IMPORTED_MODULE_3__.DatabasePriority.getActiveDatabase();\n        switch(activeDb){\n            case 'supabase':\n                return await this.addProductToSupabase(product);\n            case 'firebase':\n                return await this.addProductToFirebase(product);\n            case 'neon':\n                return await this.addProductToNeon(product);\n            default:\n                throw new Error(`Invalid database type: ${activeDb}. Only real databases are supported.`);\n        }\n    }\n    static async addTransaction(transaction) {\n        const activeDb = _databasePriority__WEBPACK_IMPORTED_MODULE_3__.DatabasePriority.getActiveDatabase();\n        switch(activeDb){\n            case 'supabase':\n                return await this.addTransactionToSupabase(transaction);\n            case 'firebase':\n                return await this.addTransactionToFirebase(transaction);\n            case 'neon':\n                return await this.addTransactionToNeon(transaction);\n            default:\n                throw new Error(`Invalid database type: ${activeDb}. Only real databases are supported.`);\n        }\n    }\n    // Firebase implementations\n    static async getProductsFromFirebase() {\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"products\"));\n        return snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    }\n    static async getTransactionsFromFirebase() {\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"sales\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy)(\"timestamp\", \"desc\"));\n        const snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(q);\n        return snapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data(),\n                timestamp: doc.data().timestamp?.toDate() || new Date()\n            }));\n    }\n    static async addProductToFirebase(product) {\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"products\"), product);\n        return {\n            id: docRef.id,\n            ...product\n        };\n    }\n    static async addTransactionToFirebase(transaction) {\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"sales\"), transaction);\n        return {\n            id: docRef.id,\n            ...transaction\n        };\n    }\n    // Supabase implementations\n    static async getProductsFromSupabase() {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('products').select('*');\n        if (error) throw error;\n        return data || [];\n    }\n    static async getTransactionsFromSupabase() {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('sales').select('*').order('timestamp', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data || [];\n    }\n    static async addProductToSupabase(product) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('products').insert([\n            product\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    }\n    static async addTransactionToSupabase(transaction) {\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('sales').insert([\n            transaction\n        ]).select().single();\n        if (error) throw error;\n        return data;\n    }\n    // Neon/PostgreSQL implementations (via API)\n    static async getProductsFromNeon() {\n        const response = await fetch('/api/products');\n        if (!response.ok) throw new Error('Failed to fetch products from Neon');\n        return await response.json();\n    }\n    static async getTransactionsFromNeon() {\n        const response = await fetch('/api/sales');\n        if (!response.ok) throw new Error('Failed to fetch transactions from Neon');\n        return await response.json();\n    }\n    static async addProductToNeon(product) {\n        const response = await fetch('/api/products', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(product)\n        });\n        if (!response.ok) throw new Error('Failed to add product to Neon');\n        return await response.json();\n    }\n    static async addTransactionToNeon(transaction) {\n        const response = await fetch('/api/sales', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(transaction)\n        });\n        if (!response.ok) throw new Error('Failed to add transaction to Neon');\n        return await response.json();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./client/src/lib/dataService.ts\n");

/***/ }),

/***/ "(ssr)/./client/src/lib/databasePriority.ts":
/*!********************************************!*\
  !*** ./client/src/lib/databasePriority.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabasePriority: () => (/* binding */ DatabasePriority)\n/* harmony export */ });\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/firestore */ \"(ssr)/./node_modules/firebase/firestore/dist/index.mjs\");\n/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./firebase */ \"(ssr)/./client/src/lib/firebase.ts\");\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./supabase */ \"(ssr)/./client/src/lib/supabase.ts\");\n/* harmony import */ var _offlineState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./offlineState */ \"(ssr)/./client/src/lib/offlineState.ts\");\n/* harmony import */ var _localStorageDB__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./localStorageDB */ \"(ssr)/./client/src/lib/localStorageDB.ts\");\n\n\n\n\n\nclass DatabasePriority {\n    static{\n        this.TIMEOUT_MS = 5000;\n    }\n    static async initialize() {\n        console.log(\"🔄 Testing database connections in priority order...\");\n        // Priority 1: Supabase\n        if (await this.testSupabase()) {\n            console.log(\"✅ Using Supabase as primary database\");\n            this.setActiveDatabase('supabase');\n            return;\n        }\n        // Priority 2: Firebase\n        if (await this.testFirebase()) {\n            console.log(\"✅ Using Firebase as primary database\");\n            this.setActiveDatabase('firebase');\n            return;\n        }\n        // Priority 3: Neon (PostgreSQL)\n        if (await this.testNeon()) {\n            console.log(\"✅ Using Neon PostgreSQL as primary database\");\n            this.setActiveDatabase('neon');\n            return;\n        }\n        // No fallback to demo mode - require actual database connection\n        console.error(\"❌ No database connections available. Please check your database configuration.\");\n        throw new Error(\"Database connection required. Please ensure your Supabase or Firebase configuration is correct.\");\n    }\n    static async testSupabase() {\n        try {\n            const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Supabase timeout\")), this.TIMEOUT_MS));\n            const testQuery = _supabase__WEBPACK_IMPORTED_MODULE_2__.supabase.from('users').select('count').limit(1);\n            await Promise.race([\n                testQuery,\n                timeoutPromise\n            ]);\n            return true;\n        } catch (error) {\n            console.log(\"❌ Supabase connection failed:\", error);\n            return false;\n        }\n    }\n    static async testFirebase() {\n        try {\n            const timeoutPromise = new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Firebase timeout\")), this.TIMEOUT_MS));\n            const testQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection)(_firebase__WEBPACK_IMPORTED_MODULE_1__.db, \"products\");\n            await Promise.race([\n                (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs)(testQuery),\n                timeoutPromise\n            ]);\n            return true;\n        } catch (error) {\n            console.log(\"❌ Firebase connection failed:\", error);\n            return false;\n        }\n    }\n    static async testNeon() {\n        try {\n            // Test connection to Neon/PostgreSQL via our API\n            const response = await fetch('/api/health', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (response.ok) {\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.log(\"❌ Neon PostgreSQL connection failed:\", error);\n            return false;\n        }\n    }\n    static setActiveDatabase(type) {\n        localStorage.setItem('charnoks_active_database', type);\n        _offlineState__WEBPACK_IMPORTED_MODULE_3__.OfflineState.setFirebaseAccess(true);\n        _offlineState__WEBPACK_IMPORTED_MODULE_3__.OfflineState.setOnlineStatus(true);\n        // Always disable demo mode - we only use real databases\n        _localStorageDB__WEBPACK_IMPORTED_MODULE_4__.LocalStorageDB.disableDemoMode();\n    }\n    static getActiveDatabase() {\n        return localStorage.getItem('charnoks_active_database') || 'supabase';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9jbGllbnQvc3JjL2xpYi9kYXRhYmFzZVByaW9yaXR5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF5RDtBQUN6QjtBQUNNO0FBQ1E7QUFDSTtBQUUzQyxNQUFNTTs7YUFDYUMsYUFBYTs7SUFFckMsYUFBYUMsYUFBNEI7UUFDdkNDLFFBQVFDLEdBQUcsQ0FBQztRQUVaLHVCQUF1QjtRQUN2QixJQUFJLE1BQU0sSUFBSSxDQUFDQyxZQUFZLElBQUk7WUFDN0JGLFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQ0UsaUJBQWlCLENBQUM7WUFDdkI7UUFDRjtRQUVBLHVCQUF1QjtRQUN2QixJQUFJLE1BQU0sSUFBSSxDQUFDQyxZQUFZLElBQUk7WUFDN0JKLFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQ0UsaUJBQWlCLENBQUM7WUFDdkI7UUFDRjtRQUVBLGdDQUFnQztRQUNoQyxJQUFJLE1BQU0sSUFBSSxDQUFDRSxRQUFRLElBQUk7WUFDekJMLFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUksQ0FBQ0UsaUJBQWlCLENBQUM7WUFDdkI7UUFDRjtRQUVBLGdFQUFnRTtRQUNoRUgsUUFBUU0sS0FBSyxDQUFDO1FBQ2QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBRUEsYUFBcUJMLGVBQWlDO1FBQ3BELElBQUk7WUFDRixNQUFNTSxpQkFBaUIsSUFBSUMsUUFBUSxDQUFDQyxHQUFHQyxTQUNyQ0MsV0FBVyxJQUFNRCxPQUFPLElBQUlKLE1BQU0sc0JBQXNCLElBQUksQ0FBQ1QsVUFBVTtZQUd6RSxNQUFNZSxZQUFZbkIsK0NBQVFBLENBQUNvQixJQUFJLENBQUMsU0FBU0MsTUFBTSxDQUFDLFNBQVNDLEtBQUssQ0FBQztZQUMvRCxNQUFNUCxRQUFRUSxJQUFJLENBQUM7Z0JBQUNKO2dCQUFXTDthQUFlO1lBRTlDLE9BQU87UUFDVCxFQUFFLE9BQU9GLE9BQU87WUFDZE4sUUFBUUMsR0FBRyxDQUFDLGlDQUFpQ0s7WUFDN0MsT0FBTztRQUNUO0lBQ0Y7SUFFQSxhQUFxQkYsZUFBaUM7UUFDcEQsSUFBSTtZQUNGLE1BQU1JLGlCQUFpQixJQUFJQyxRQUFRLENBQUNDLEdBQUdDLFNBQ3JDQyxXQUFXLElBQU1ELE9BQU8sSUFBSUosTUFBTSxzQkFBc0IsSUFBSSxDQUFDVCxVQUFVO1lBR3pFLE1BQU1lLFlBQVl0Qiw4REFBVUEsQ0FBQ0UseUNBQUVBLEVBQUU7WUFDakMsTUFBTWdCLFFBQVFRLElBQUksQ0FBQztnQkFBQ3pCLDJEQUFPQSxDQUFDcUI7Z0JBQVlMO2FBQWU7WUFFdkQsT0FBTztRQUNULEVBQUUsT0FBT0YsT0FBTztZQUNkTixRQUFRQyxHQUFHLENBQUMsaUNBQWlDSztZQUM3QyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLGFBQXFCRCxXQUE2QjtRQUNoRCxJQUFJO1lBQ0YsaURBQWlEO1lBQ2pELE1BQU1hLFdBQVcsTUFBTUMsTUFBTSxlQUFlO2dCQUMxQ0MsUUFBUTtnQkFDUkMsU0FBUztvQkFDUCxnQkFBZ0I7Z0JBQ2xCO1lBQ0Y7WUFFQSxJQUFJSCxTQUFTSSxFQUFFLEVBQUU7Z0JBQ2YsT0FBTztZQUNUO1lBQ0EsT0FBTztRQUNULEVBQUUsT0FBT2hCLE9BQU87WUFDZE4sUUFBUUMsR0FBRyxDQUFDLHdDQUF3Q0s7WUFDcEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFlSCxrQkFBa0JvQixJQUFzQyxFQUFFO1FBQ3ZFQyxhQUFhQyxPQUFPLENBQUMsNEJBQTRCRjtRQUNqRDVCLHVEQUFZQSxDQUFDK0IsaUJBQWlCLENBQUM7UUFDL0IvQix1REFBWUEsQ0FBQ2dDLGVBQWUsQ0FBQztRQUM3Qix3REFBd0Q7UUFDeEQvQiwyREFBY0EsQ0FBQ2dDLGVBQWU7SUFDaEM7SUFFQSxPQUFPQyxvQkFBNEI7UUFDakMsT0FBT0wsYUFBYU0sT0FBTyxDQUFDLCtCQUErQjtJQUM3RDtBQUNGIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L2NsaWVudC9zcmMvbGliL2RhdGFiYXNlUHJpb3JpdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29sbGVjdGlvbiwgZ2V0RG9jcyB9IGZyb20gXCJmaXJlYmFzZS9maXJlc3RvcmVcIjtcbmltcG9ydCB7IGRiIH0gZnJvbSBcIi4vZmlyZWJhc2VcIjtcbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSBcIi4vc3VwYWJhc2VcIjtcbmltcG9ydCB7IE9mZmxpbmVTdGF0ZSB9IGZyb20gXCIuL29mZmxpbmVTdGF0ZVwiO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlREIgfSBmcm9tIFwiLi9sb2NhbFN0b3JhZ2VEQlwiO1xuXG5leHBvcnQgY2xhc3MgRGF0YWJhc2VQcmlvcml0eSB7XG4gIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRJTUVPVVRfTVMgPSA1MDAwO1xuXG4gIHN0YXRpYyBhc3luYyBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnNvbGUubG9nKFwi8J+UhCBUZXN0aW5nIGRhdGFiYXNlIGNvbm5lY3Rpb25zIGluIHByaW9yaXR5IG9yZGVyLi4uXCIpO1xuICAgIFxuICAgIC8vIFByaW9yaXR5IDE6IFN1cGFiYXNlXG4gICAgaWYgKGF3YWl0IHRoaXMudGVzdFN1cGFiYXNlKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwi4pyFIFVzaW5nIFN1cGFiYXNlIGFzIHByaW1hcnkgZGF0YWJhc2VcIik7XG4gICAgICB0aGlzLnNldEFjdGl2ZURhdGFiYXNlKCdzdXBhYmFzZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByaW9yaXR5IDI6IEZpcmViYXNlXG4gICAgaWYgKGF3YWl0IHRoaXMudGVzdEZpcmViYXNlKCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwi4pyFIFVzaW5nIEZpcmViYXNlIGFzIHByaW1hcnkgZGF0YWJhc2VcIik7XG4gICAgICB0aGlzLnNldEFjdGl2ZURhdGFiYXNlKCdmaXJlYmFzZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByaW9yaXR5IDM6IE5lb24gKFBvc3RncmVTUUwpXG4gICAgaWYgKGF3YWl0IHRoaXMudGVzdE5lb24oKSkge1xuICAgICAgY29uc29sZS5sb2coXCLinIUgVXNpbmcgTmVvbiBQb3N0Z3JlU1FMIGFzIHByaW1hcnkgZGF0YWJhc2VcIik7XG4gICAgICB0aGlzLnNldEFjdGl2ZURhdGFiYXNlKCduZW9uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTm8gZmFsbGJhY2sgdG8gZGVtbyBtb2RlIC0gcmVxdWlyZSBhY3R1YWwgZGF0YWJhc2UgY29ubmVjdGlvblxuICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgTm8gZGF0YWJhc2UgY29ubmVjdGlvbnMgYXZhaWxhYmxlLiBQbGVhc2UgY2hlY2sgeW91ciBkYXRhYmFzZSBjb25maWd1cmF0aW9uLlwiKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhYmFzZSBjb25uZWN0aW9uIHJlcXVpcmVkLiBQbGVhc2UgZW5zdXJlIHlvdXIgU3VwYWJhc2Ugb3IgRmlyZWJhc2UgY29uZmlndXJhdGlvbiBpcyBjb3JyZWN0LlwiKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIHRlc3RTdXBhYmFzZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PlxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoXCJTdXBhYmFzZSB0aW1lb3V0XCIpKSwgdGhpcy5USU1FT1VUX01TKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgdGVzdFF1ZXJ5ID0gc3VwYWJhc2UuZnJvbSgndXNlcnMnKS5zZWxlY3QoJ2NvdW50JykubGltaXQoMSk7XG4gICAgICBhd2FpdCBQcm9taXNlLnJhY2UoW3Rlc3RRdWVyeSwgdGltZW91dFByb21pc2VdKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwi4p2MIFN1cGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOlwiLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgdGVzdEZpcmViYXNlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcihcIkZpcmViYXNlIHRpbWVvdXRcIikpLCB0aGlzLlRJTUVPVVRfTVMpXG4gICAgICApO1xuXG4gICAgICBjb25zdCB0ZXN0UXVlcnkgPSBjb2xsZWN0aW9uKGRiLCBcInByb2R1Y3RzXCIpO1xuICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtnZXREb2NzKHRlc3RRdWVyeSksIHRpbWVvdXRQcm9taXNlXSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIuKdjCBGaXJlYmFzZSBjb25uZWN0aW9uIGZhaWxlZDpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIHRlc3ROZW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBUZXN0IGNvbm5lY3Rpb24gdG8gTmVvbi9Qb3N0Z3JlU1FMIHZpYSBvdXIgQVBJXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2hlYWx0aCcsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIuKdjCBOZW9uIFBvc3RncmVTUUwgY29ubmVjdGlvbiBmYWlsZWQ6XCIsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBzZXRBY3RpdmVEYXRhYmFzZSh0eXBlOiAnc3VwYWJhc2UnIHwgJ2ZpcmViYXNlJyB8ICduZW9uJykge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjaGFybm9rc19hY3RpdmVfZGF0YWJhc2UnLCB0eXBlKTtcbiAgICBPZmZsaW5lU3RhdGUuc2V0RmlyZWJhc2VBY2Nlc3ModHJ1ZSk7XG4gICAgT2ZmbGluZVN0YXRlLnNldE9ubGluZVN0YXR1cyh0cnVlKTtcbiAgICAvLyBBbHdheXMgZGlzYWJsZSBkZW1vIG1vZGUgLSB3ZSBvbmx5IHVzZSByZWFsIGRhdGFiYXNlc1xuICAgIExvY2FsU3RvcmFnZURCLmRpc2FibGVEZW1vTW9kZSgpO1xuICB9XG5cbiAgc3RhdGljIGdldEFjdGl2ZURhdGFiYXNlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjaGFybm9rc19hY3RpdmVfZGF0YWJhc2UnKSB8fCAnc3VwYWJhc2UnO1xuICB9XG59Il0sIm5hbWVzIjpbImNvbGxlY3Rpb24iLCJnZXREb2NzIiwiZGIiLCJzdXBhYmFzZSIsIk9mZmxpbmVTdGF0ZSIsIkxvY2FsU3RvcmFnZURCIiwiRGF0YWJhc2VQcmlvcml0eSIsIlRJTUVPVVRfTVMiLCJpbml0aWFsaXplIiwiY29uc29sZSIsImxvZyIsInRlc3RTdXBhYmFzZSIsInNldEFjdGl2ZURhdGFiYXNlIiwidGVzdEZpcmViYXNlIiwidGVzdE5lb24iLCJlcnJvciIsIkVycm9yIiwidGltZW91dFByb21pc2UiLCJQcm9taXNlIiwiXyIsInJlamVjdCIsInNldFRpbWVvdXQiLCJ0ZXN0UXVlcnkiLCJmcm9tIiwic2VsZWN0IiwibGltaXQiLCJyYWNlIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsInR5cGUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwic2V0RmlyZWJhc2VBY2Nlc3MiLCJzZXRPbmxpbmVTdGF0dXMiLCJkaXNhYmxlRGVtb01vZGUiLCJnZXRBY3RpdmVEYXRhYmFzZSIsImdldEl0ZW0iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./client/src/lib/databasePriority.ts\n");

/***/ }),

/***/ "(ssr)/./client/src/lib/supabase.ts":
/*!************************************!*\
  !*** ./client/src/lib/supabase.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSupabaseConfigured: () => (/* binding */ isSupabaseConfigured),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Supabase configuration - replace with your actual credentials when ready\nconst supabaseUrl = /* unsupported import.meta.env.VITE_SUPABASE_URL */ undefined.VITE_SUPABASE_URL || 'https://your-project.supabase.co';\nconst supabaseAnonKey = /* unsupported import.meta.env.VITE_SUPABASE_ANON_KEY */ undefined.VITE_SUPABASE_ANON_KEY || 'your-anon-key';\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Check if Supabase is properly configured\nconst isSupabaseConfigured = ()=>{\n    return /* unsupported import.meta.env.VITE_SUPABASE_URL */ undefined.VITE_SUPABASE_URL && /* unsupported import.meta.env.VITE_SUPABASE_ANON_KEY */ undefined.VITE_SUPABASE_ANON_KEY;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9jbGllbnQvc3JjL2xpYi9zdXBhYmFzZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDb0Q7QUFFcEQsMkVBQTJFO0FBQzNFLE1BQU1DLGNBQWMsK0VBQWlDLElBQUk7QUFDekQsTUFBTUcsa0JBQWtCLHlGQUFzQyxJQUFJO0FBRTNELE1BQU1FLFdBQVdOLG1FQUFZQSxDQUFDQyxhQUFhRyxpQkFBZ0I7QUFFbEUsMkNBQTJDO0FBQ3BDLE1BQU1HLHVCQUF1QjtJQUNsQyxPQUFPLCtFQUFpQyxJQUFJLHlGQUFzQztBQUNwRixFQUFDIiwic291cmNlcyI6WyIvaG9tZS9wcm9qZWN0L2NsaWVudC9zcmMvbGliL3N1cGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJ1xuXG4vLyBTdXBhYmFzZSBjb25maWd1cmF0aW9uIC0gcmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIGNyZWRlbnRpYWxzIHdoZW4gcmVhZHlcbmNvbnN0IHN1cGFiYXNlVXJsID0gaW1wb3J0Lm1ldGEuZW52LlZJVEVfU1VQQUJBU0VfVVJMIHx8ICdodHRwczovL3lvdXItcHJvamVjdC5zdXBhYmFzZS5jbydcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IGltcG9ydC5tZXRhLmVudi5WSVRFX1NVUEFCQVNFX0FOT05fS0VZIHx8ICd5b3VyLWFub24ta2V5J1xuXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSlcblxuLy8gQ2hlY2sgaWYgU3VwYWJhc2UgaXMgcHJvcGVybHkgY29uZmlndXJlZFxuZXhwb3J0IGNvbnN0IGlzU3VwYWJhc2VDb25maWd1cmVkID0gKCkgPT4ge1xuICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZJVEVfU1VQQUJBU0VfVVJMICYmIGltcG9ydC5tZXRhLmVudi5WSVRFX1NVUEFCQVNFX0FOT05fS0VZXG59XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJlbnYiLCJWSVRFX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIlZJVEVfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSIsImlzU3VwYWJhc2VDb25maWd1cmVkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./client/src/lib/supabase.ts\n");

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ })

};
;