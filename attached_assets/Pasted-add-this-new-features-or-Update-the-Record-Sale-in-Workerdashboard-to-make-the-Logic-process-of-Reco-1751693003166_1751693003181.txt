add this new features or Update the Record Sale in Workerdashboard to make the Logic process of Recording Sale and Redesign of layout and visual  necessary to adapt to this changes: This process is designed for speed and simplicity, especially for small stores. The worker selects a product, enters quantity and customer payment, and saves the sale in just a few steps. No shopping cart system is used.   ---  1. Worker Logs In  ✅ Authenticated using Firebase Authentication (firebase.auth().signInWithEmailAndPassword)  🔐 Session or token stored in browser (or handled by Firebase)    ---  2. Product List Loads  📦 Frontend fetches product data on page load.  🔁 Data Source: Firestore → products collection  📄 Each product includes:  Product ID  Name  Price  Image URL    firestore.collection("products").get()   ---  3. Worker Taps a Product  🖱️ UI triggers selection  🔁 Frontend stores selected product (in state or variable)    ---  4. Worker Enters Quantity  🔢 Inputs quantity directly on the UI  🧮 Frontend calculates:  total = product.price * quantity    ---  5. Worker Enters Customer Payment  💵 Enters cash given by customer  💰 Frontend calculates change:  change = payment - total  ⚠️ Optional: Show error if payment < total    ---  6. Worker Clicks "Save Sale"  📤 Sends the sale data to the backend or Firestore:  Endpoint: POST /sales or Firebase .add() to sales collection  Payload example:    {   "productId": "abc123",   "productName": "Coke",   "price": 15,   "quantity": 2,   "total": 30,   "payment": 50,   "change": 20,   "workerId": "uid123",   "timestamp": "auto-generated by Firestore" }   ---  7. Backend Saves Sale Record  🗃️ Firestore writes to sales collection  ✅ Optionally logs worker ID and timestamp for tracking    ---  8. Confirmation  ✅ Backend returns success  ✅ Frontend clears input fields  🎉 UI shows toast or message: “Sale saved!”    ---  🛑 Error Handling (Optional)  ❌ If required fields are missing → Show error  ❌ If payment is less than total → Block submission    ---  ✅ Notes  ⏱️ This design prioritizes speed and simplicity  🛒 "Add to cart" feature is intentionally skipped to save time and reduce complexity  🔒 Always ensure only logged-in workers can access this function    ---  Would you like a diagram version or want me to help with the actual React + Firebase code for this flow?  This process is designed for speed and simplicity, especially for small stores. The worker selects a product, enters quantity and customer payment, and saves the sale in just a few steps. No shopping cart system is used.   ---  1. Worker Logs In  ✅ Authenticated using Firebase Authentication (firebase.auth().signInWithEmailAndPassword)  🔐 Session or token stored in browser (or handled by Firebase)    ---  2. Product List Loads  📦 Frontend fetches product data on page load.  🔁 Data Source: Firestore → products collection  📄 Each product includes:  Product ID  Name  Price  Image URL    firestore.collection("products").get()   ---  3. Worker Taps a Product  🖱️ UI triggers selection  🔁 Frontend stores selected product (in state or variable)    ---  4. Worker Enters Quantity  🔢 Inputs quantity directly on the UI  🧮 Frontend calculates:  total = product.price * quantity    ---  5. Worker Enters Customer Payment  💵 Enters cash given by customer  💰 Frontend calculates change:  change = payment - total  ⚠️ Optional: Show error if payment < total    ---  6. Worker Clicks "Save Sale"  📤 Sends the sale data to the backend or Firestore:  Endpoint: POST /sales or Firebase .add() to sales collection  Payload example:    {   "productId": "abc123",   "productName": "Coke",   "price": 15,   "quantity": 2,   "total": 30,   "payment": 50,   "change": 20,   "workerId": "uid123",   "timestamp": "auto-generated by Firestore" }   ---  7. Backend Saves Sale Record  🗃️ Firestore writes to sales collection  ✅ Optionally logs worker ID and timestamp for tracking    ---  8. Confirmation  ✅ Backend returns success  ✅ Frontend clears input fields  🎉 UI shows toast or message: “Sale saved!”    ---  🛑 Error Handling (Optional)  ❌ If required fields are missing → Show error  ❌ If payment is less than total → Block submission    ---  ✅ Notes  ⏱️ This design prioritizes speed and simplicity  🛒 "Add to cart" feature is intentionally skipped to save time and reduce complexity  🔒 Always ensure only logged-in workers can access this function    ---  Would you like a diagram version or want me to help with the actual React + Firebase code for this flow?  